2.1  Simple Message: Store a message in a variable, and then print that 
     message.
     
A.   message = ("how are you") 
     print(message)
     
     
2.2  Simple Messages: Store a message in a variable, and print that message.
     Then change the value of your variable to a new message, and print the new 
     message     


A.   message = ("how are you") 
     print(message)
     #lets change message variable from str to int
     
     message = 2
     print(message)
     
     
2.3  Personal Message: Store a person’s name in a variable, and print a message to that person. Your message should be simple, such as, “Hello Eric, 
     would you like to learn some Python today?”     
     
A.   name = ("siddu")
     print("hello " + name + "," + "would you like to learn some Python today?")
     

2.4  Name Cases: Store a person’s name in a variable, and then print that person’s name in lowercase, uppercase, and titlecase.

A.   name = ("siddu")
     print(name)
     print(name.title())
     print(name.lowecase())
     print(name.uppercase())
     
     
2.5  Famous Quote: Find a quote from a famous person you admire. Print the 
     quote and the name of its author. Your output should look something like the 
     following, including the quotation marks:
     Albert Einstein once said, “A person who never made a 
     mistake never tried anything new.”     
     
A.   print("Albert Einstein once said, “A person who never made a 
     mistake never tried anything new.” ")
     
     
2.6  Famous Quote 2: Repeat Exercise 2-5, but this time store the famous person’s name in a variable called famous_person. Then compose your message 
     and store it in a new variable called message. Print your message.  
     
A.   famous_person = ("albert einstein")     
     message = ("“A person who never made a mistake never tried anything new.”")
     print(famous_person.title() +" " + "once said, " + message)
     
2.7  Stripping Names: Store a person’s name, and include some whitespace 
     characters at the beginning and end of the name. Make sure you use each 
     character combination, "\t" and "\n", at least once.
     Print the name once, so the whitespace around the name is displayed.
     Then print the name using each of the three stripping functions, lstrip(), 
     rstrip(), and strip()
     
A.   names = ("  siddu") 
     print(names.lstrip() + "\n")
     names = ("siddu  ")
     print(names.rstrip())
     names = ("  siddu  ")
     print(names.strip() + "\t")
     

2.8  Number Eight: Write addition, subtraction, multiplication, and division 
     operations that each result in the number 8. Be sure to enclose your operations 
     in print statements to see the results. You should create four lines that look 
     like this:
     print(5 + 3)
     Your output should simply be four lines with the number 8 appearing once 
     on each line.
     
A.   print(5+3)
     print(12-4)
     print(4*2)
     print(16/2)
      
2.9   Favorite Number: Store your favorite number in a variable. Then, using 
      that variable, create a message that reveals your favorite number. Print that 
      message     
      
A.    num= (7)
      print(num)
      
2.10  Adding Comments: Choose two of the programs you’ve written, and 
      add at least one comment to each. If you don’t have anything specific to write 
      because your programs are too simple at this point, just add your name and 
      the current date at the top of each program file. Then write one sentence 
      describing what the program does.     
      
A.    """Adding Comments: Choose two of the programs you’ve written, and 
      add at least one comment to each. If you don’t have anything specific to write 
      because your programs are too simple at this point, just add your name and 
      the current date at the top of each program file. Then write one sentence 
      what the program does.""""
      
      
2.11  Zen of Python: Enter import this into a Python terminal session and skim 
      through the additional principles   
      
A.     import this
The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!      
